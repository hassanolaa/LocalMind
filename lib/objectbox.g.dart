// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'features/home/data/models.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 8645627100822790945),
      name: 'Chat',
      lastPropertyId: const obx_int.IdUid(3, 6128077075168450604),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8449075710197496511),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6231742309198714968),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6128077075168450604),
            name: 'lastMessageTime',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'Messages', srcEntity: 'Message', srcField: 'chat')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 8591554990777260851),
      name: 'Message',
      lastPropertyId: const obx_int.IdUid(5, 2328746474087804033),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2791412238791604321),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8507278763854713957),
            name: 'content',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5990046780980393599),
            name: 'role',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6265455911460404993),
            name: 'modelName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2328746474087804033),
            name: 'chatId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 8440969759823860073),
            relationTarget: 'Chat')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(2, 8591554990777260851),
      lastIndexId: const obx_int.IdUid(1, 8440969759823860073),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Chat: obx_int.EntityDefinition<Chat>(
        model: _entities[0],
        toOneRelations: (Chat object) => [],
        toManyRelations: (Chat object) => {
              obx_int.RelInfo<Message>.toOneBacklink(
                      5, object.id, (Message srcObject) => srcObject.chat):
                  object.Messages
            },
        getId: (Chat object) => object.id,
        setId: (Chat object, int id) {
          object.id = id;
        },
        objectToFB: (Chat object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.lastMessageTime.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final lastMessageTimeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final object = Chat(
              name: nameParam, lastMessageTime: lastMessageTimeParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          obx_int.InternalToManyAccess.setRelInfo<Chat>(
              object.Messages,
              store,
              obx_int.RelInfo<Message>.toOneBacklink(
                  5, object.id, (Message srcObject) => srcObject.chat));
          return object;
        }),
    Message: obx_int.EntityDefinition<Message>(
        model: _entities[1],
        toOneRelations: (Message object) => [object.chat],
        toManyRelations: (Message object) => {},
        getId: (Message object) => object.id,
        setId: (Message object, int id) {
          object.id = id;
        },
        objectToFB: (Message object, fb.Builder fbb) {
          final contentOffset = fbb.writeString(object.content);
          final roleOffset = fbb.writeString(object.role);
          final modelNameOffset = fbb.writeString(object.modelName);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, contentOffset);
          fbb.addOffset(2, roleOffset);
          fbb.addOffset(3, modelNameOffset);
          fbb.addInt64(4, object.chat.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final contentParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final roleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final modelNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = Message(
              content: contentParam, role: roleParam, modelName: modelNameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.chat.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.chat.attach(store);
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Chat] entity fields to define ObjectBox queries.
class Chat_ {
  /// See [Chat.id].
  static final id = obx.QueryIntegerProperty<Chat>(_entities[0].properties[0]);

  /// See [Chat.name].
  static final name = obx.QueryStringProperty<Chat>(_entities[0].properties[1]);

  /// See [Chat.lastMessageTime].
  static final lastMessageTime =
      obx.QueryDateProperty<Chat>(_entities[0].properties[2]);

  /// see [Chat.Messages]
  static final Messages = obx.QueryBacklinkToMany<Message, Chat>(Message_.chat);
}

/// [Message] entity fields to define ObjectBox queries.
class Message_ {
  /// See [Message.id].
  static final id =
      obx.QueryIntegerProperty<Message>(_entities[1].properties[0]);

  /// See [Message.content].
  static final content =
      obx.QueryStringProperty<Message>(_entities[1].properties[1]);

  /// See [Message.role].
  static final role =
      obx.QueryStringProperty<Message>(_entities[1].properties[2]);

  /// See [Message.modelName].
  static final modelName =
      obx.QueryStringProperty<Message>(_entities[1].properties[3]);

  /// See [Message.chat].
  static final chat =
      obx.QueryRelationToOne<Message, Chat>(_entities[1].properties[4]);
}
